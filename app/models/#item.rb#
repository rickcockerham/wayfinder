class Item < ApplicationRecord
  enum category: {
    gaia:0, annie:1, arduino:2, woodworking:3, vineyard:4, shop:5, house:6, w2e:7, website:8, judo:9, other:10
  }
  enum mood: { work:0, play:1, building:2 }

  belongs_to :parent, class_name: "Item", optional: true
  has_many :children, class_name: "Item", foreign_key: :parent_id, dependent: :nullify

  has_many :blocking_edges, class_name: "ItemBlock", foreign_key: :blocked_id, dependent: :destroy
  has_many :blockers, through: :blocking_edges, source: :blocker

  has_many :material_requirements, dependent: :destroy

  validates :title, presence: true

  # Investment score: simple tunable sum
  def investment_score
    (personal_impact.to_i * 3) + (emotional_impact.to_i * 2) + (family_impact.to_i * 2) + urgency
  end

  def urgency
    return 0 unless deadline
    days = (deadline - Date.today).to_i
    return 6 if days < 0
    [0, 5 - days].max
  end

  def missing_materials_by(inventory_hash)
    material_requirements.filter_map do |mr|
      key = mr.name.downcase
      have = inventory_hash[key]&.qty_have.to_f
      short = mr.qty_needed.to_f - have
      short > 0 ? { name: mr.name, short:, unit: mr.unit, location: mr.location } : nil
    end
  end

  def ready_now?(inventory_hash:)
    blockers.none? && missing_materials_by(inventory_hash).empty? && !done?
  end
end
